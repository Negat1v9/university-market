package taskmodel

import (
	"time"

	usermodel "github.com/Negat1v9/work-marketplace/model/userModel"
)

type TaskStatus string

const (
	Pending          TaskStatus = "pnd" // Waiting for the task to be ready
	WaitingExecution TaskStatus = "we"  // Task is ready and workers can find it
	InProgress       TaskStatus = "prg" // During execution
	Completed        TaskStatus = "cmp" // Completed
	Deleted          TaskStatus = "del" // Task is deleted
)

type TaskMeta struct {
	WithFiles     bool   `bson:"with_files,omitempty" json:"with_files,omitempty"`         //
	MaxDaysWork   uint8  `bson:"max_days_work,omitempty" json:"max_days_work,omitempty"`   // the max number of days that work on a task can last
	MinPrice      uint   `bson:"min_price,omitempty" json:"min_price,omitempty"`           // minimum price (RUB)
	MaxPrice      uint   `bson:"max_price,omitempty" json:"max_price,omitempty"`           // maximum price (RUB)
	FormEducation string `bson:"form_education,omitempty" json:"form_education,omitempty"` // form education in university (bachelor, master degree), required on create
	University    string `bson:"university,omitempty" json:"university,omitempty"`         // name of the university required on create
	Subject       string `bson:"subject,omitempty" json:"subject,omitempty"`               // item name
	TaskType      string `bson:"task_type,omitempty" json:"task_type,omitempty"`           // Task type (abstract, thesis ...) required on create
	Description   string `bson:"description,omitempty" json:"description,omitempty"`       // Description of the task
}

type Task struct {
	ID          string     `bson:"_id,omitempty" json:"id,omitempty"` // unique identifier generated by mongo
	IsComment   bool       `bson:"is_comment,omitempty" json:"is_comment,omitempty"`
	OnPromotion bool       `bson:"on_promotion,omitempty" json:"on_promotion,omitempty"` // task is on promotion default false
	Views       int        `bson:"views,omitempty" json:"views,omitempty"`               // number of views
	CreatedBy   string     `bson:"created_by,omitempty" json:"created_by,omitempty"`     // ID of the user who created the task
	AssignedTo  string     `bson:"assigned_to,omitempty" json:"assigned_to,omitempty"`   // ID of the employee to whom the task is assigned (if assigned)
	CommentID   string     `bson:"comment_id,omitempty" json:"comment_id,omitempty"`
	Status      TaskStatus `bson:"status,omitempty" json:"status,omitempty"`             // Task status
	Meta        *TaskMeta  `bson:"meta,omitempty" json:"meta,omitempty"`                 // additional information
	Tags        []string   `bson:"tags,omitempty" json:"tags,omitempty"`                 // tags for search (subject task, etc.)
	FilesID     []string   `bson:"files_id,omitempty" json:"-"`                          // url or identifier from telegram for task document or photos
	Responds    []string   `bson:"responds,omitempty" json:"responds"`                   // array of IDs of workers who responded to the task
	FilesSend   []string   `bson:"files_send,omitempty" json:"-"`                        // worker id who alredy recieve files
	CreatedAt   time.Time  `bson:"created_at,omitempty" json:"created_at,omitempty"`     // Task creation date (UTC)
	ComplitedAT time.Time  `bson:"completed_at,omitempty" json:"completed_at,omitempty"` // Job end date (UTC)
	UpdatedAt   time.Time  `bson:"updated_at,omitempty" json:"updated_at,omitempty"`     // Date of last task update (UTC)
	DeleteAt    *time.Time `bson:"delete_at,omitempty" json:"-"`                         // the field is optional; if it is filled in, it means that the document will be deleted by mongo
}

func NewTask(createdBy string, meta *TaskMeta, tags []string) *Task {
	return &Task{
		Views:     0,
		CreatedBy: createdBy,
		Status:    Pending,
		Meta:      meta,
		Tags:      tags,
		Responds:  make([]string, 0),
		CreatedAt: time.Now().UTC(),
	}
}

type InfoTaskRes struct {
	Task          *Task `json:"task"`
	QuantityFiles int   `json:"quantity_files,omitempty"`
	RespondPrice  int   `json:"respond_price,omitempty"`
}

// test what will updated in task.meta
type UpdateTaskMeta struct {
	Meta TaskMeta `bson:"meta" json:"meta"`
}

type NewTaskCreatedRes struct {
	TaskID string `json:"task_id"`
}

type TaskAndWorkerRes struct {
	TaskID string                          `json:"task_id"`
	Worker usermodel.WorkerInfoWithTaskRes `json:"worker"`
}
