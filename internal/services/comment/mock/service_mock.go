// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/comment/type.go

// Package comment_service_mock is a generated GoMock package.
package comment_service_mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	commentmodel "github.com/Negat1v9/work-marketplace/model/comment"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentService) Create(ctx context.Context, userID string, comment *commentmodel.Comment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, comment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentServiceMockRecorder) Create(ctx, userID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentService)(nil).Create), ctx, userID, comment)
}

// UserComments mocks base method.
func (m *MockCommentService) UserComments(ctx context.Context, userID string, v url.Values) ([]commentmodel.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserComments", ctx, userID, v)
	ret0, _ := ret[0].([]commentmodel.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserComments indicates an expected call of UserComments.
func (mr *MockCommentServiceMockRecorder) UserComments(ctx, userID, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserComments", reflect.TypeOf((*MockCommentService)(nil).UserComments), ctx, userID, v)
}

// WorkerComments mocks base method.
func (m *MockCommentService) WorkerComments(ctx context.Context, workerID string, v url.Values) ([]commentmodel.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerComments", ctx, workerID, v)
	ret0, _ := ret[0].([]commentmodel.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerComments indicates an expected call of WorkerComments.
func (mr *MockCommentServiceMockRecorder) WorkerComments(ctx, workerID, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerComments", reflect.TypeOf((*MockCommentService)(nil).WorkerComments), ctx, workerID, v)
}
