// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/user/type.go

// Package user_service_mock is a generated GoMock package.
package user_service_mock

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Negat1v9/work-marketplace/model/userModel"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockUserService) Auth(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockUserServiceMockRecorder) Auth(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockUserService)(nil).Auth), ctx, userID)
}

// AuthWorker mocks base method.
func (m *MockUserService) AuthWorker(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthWorker", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthWorker indicates an expected call of AuthWorker.
func (mr *MockUserServiceMockRecorder) AuthWorker(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthWorker", reflect.TypeOf((*MockUserService)(nil).AuthWorker), ctx, userID)
}

// Create mocks base method.
func (m *MockUserService) Create(ctx context.Context, newUser *usermodel.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, newUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), ctx, newUser)
}

// User mocks base method.
func (m *MockUserService) User(ctx context.Context, userID string) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, userID)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserServiceMockRecorder) User(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserService)(nil).User), ctx, userID)
}
