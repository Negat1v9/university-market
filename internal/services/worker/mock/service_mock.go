// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/worker/type.go

// Package worker_service_mock is a generated GoMock package.
package worker_service_mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	respondmodel "github.com/Negat1v9/work-marketplace/model/respond"
	taskmodel "github.com/Negat1v9/work-marketplace/model/taskModel"
	usermodel "github.com/Negat1v9/work-marketplace/model/userModel"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerService is a mock of WorkerService interface.
type MockWorkerService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerServiceMockRecorder
}

// MockWorkerServiceMockRecorder is the mock recorder for MockWorkerService.
type MockWorkerServiceMockRecorder struct {
	mock *MockWorkerService
}

// NewMockWorkerService creates a new mock instance.
func NewMockWorkerService(ctrl *gomock.Controller) *MockWorkerService {
	mock := &MockWorkerService{ctrl: ctrl}
	mock.recorder = &MockWorkerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerService) EXPECT() *MockWorkerServiceMockRecorder {
	return m.recorder
}

// AvailableTasks mocks base method.
func (m *MockWorkerService) AvailableTasks(ctx context.Context, v url.Values) ([]taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableTasks", ctx, v)
	ret0, _ := ret[0].([]taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableTasks indicates an expected call of AvailableTasks.
func (mr *MockWorkerServiceMockRecorder) AvailableTasks(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableTasks", reflect.TypeOf((*MockWorkerService)(nil).AvailableTasks), ctx, v)
}

// Create mocks base method.
func (m *MockWorkerService) Create(ctx context.Context, userID string, data *usermodel.WorkerCreate) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, data)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWorkerServiceMockRecorder) Create(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorkerService)(nil).Create), ctx, userID, data)
}

// IsWorker mocks base method.
func (m *MockWorkerService) IsWorker(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorker", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWorker indicates an expected call of IsWorker.
func (mr *MockWorkerServiceMockRecorder) IsWorker(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorker", reflect.TypeOf((*MockWorkerService)(nil).IsWorker), ctx, userID)
}

// RespondOnTask mocks base method.
func (m *MockWorkerService) RespondOnTask(ctx context.Context, workerID, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondOnTask", ctx, workerID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondOnTask indicates an expected call of RespondOnTask.
func (mr *MockWorkerServiceMockRecorder) RespondOnTask(ctx, workerID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondOnTask", reflect.TypeOf((*MockWorkerService)(nil).RespondOnTask), ctx, workerID, taskID)
}

// Responds mocks base method.
func (m *MockWorkerService) Responds(ctx context.Context, workerID string, v url.Values) ([]respondmodel.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Responds", ctx, workerID, v)
	ret0, _ := ret[0].([]respondmodel.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Responds indicates an expected call of Responds.
func (mr *MockWorkerServiceMockRecorder) Responds(ctx, workerID, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Responds", reflect.TypeOf((*MockWorkerService)(nil).Responds), ctx, workerID, v)
}

// TaskInfo mocks base method.
func (m *MockWorkerService) TaskInfo(ctx context.Context, workerID, taskID string) (*taskmodel.InfoTaskRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskInfo", ctx, workerID, taskID)
	ret0, _ := ret[0].(*taskmodel.InfoTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskInfo indicates an expected call of TaskInfo.
func (mr *MockWorkerServiceMockRecorder) TaskInfo(ctx, workerID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskInfo", reflect.TypeOf((*MockWorkerService)(nil).TaskInfo), ctx, workerID, taskID)
}

// TasksResponded mocks base method.
func (m *MockWorkerService) TasksResponded(ctx context.Context, workerID string, v url.Values) ([]taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksResponded", ctx, workerID, v)
	ret0, _ := ret[0].([]taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TasksResponded indicates an expected call of TasksResponded.
func (mr *MockWorkerServiceMockRecorder) TasksResponded(ctx, workerID, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksResponded", reflect.TypeOf((*MockWorkerService)(nil).TasksResponded), ctx, workerID, v)
}

// Update mocks base method.
func (m *MockWorkerService) Update(ctx context.Context, workerID string, data *usermodel.WorkerInfo) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, workerID, data)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWorkerServiceMockRecorder) Update(ctx, workerID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkerService)(nil).Update), ctx, workerID, data)
}

// Worker mocks base method.
func (m *MockWorkerService) Worker(ctx context.Context, workerID string) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worker", ctx, workerID)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worker indicates an expected call of Worker.
func (mr *MockWorkerServiceMockRecorder) Worker(ctx, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worker", reflect.TypeOf((*MockWorkerService)(nil).Worker), ctx, workerID)
}

// WorkerPublicInfo mocks base method.
func (m *MockWorkerService) WorkerPublicInfo(ctx context.Context, workerID string) (*usermodel.WorkerInfoWithTaskRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerPublicInfo", ctx, workerID)
	ret0, _ := ret[0].(*usermodel.WorkerInfoWithTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerPublicInfo indicates an expected call of WorkerPublicInfo.
func (mr *MockWorkerServiceMockRecorder) WorkerPublicInfo(ctx, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerPublicInfo", reflect.TypeOf((*MockWorkerService)(nil).WorkerPublicInfo), ctx, workerID)
}
