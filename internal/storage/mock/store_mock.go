// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/types.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/types.go -destination=./internal/storage/mock/store_mock.go -package=mongo_mock
//

// Package mongo_mock is a generated GoMock package.
package mongo_mock

import (
	reflect "reflect"

	storage "github.com/Negat1v9/work-marketplace/internal/storage"
	mongo "go.mongodb.org/mongo-driver/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Comment mocks base method.
func (m *MockStore) Comment() storage.CommentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment")
	ret0, _ := ret[0].(storage.CommentRepository)
	return ret0
}

// Comment indicates an expected call of Comment.
func (mr *MockStoreMockRecorder) Comment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockStore)(nil).Comment))
}

// Payment mocks base method.
func (m *MockStore) Payment() storage.PaymentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment")
	ret0, _ := ret[0].(storage.PaymentRepository)
	return ret0
}

// Payment indicates an expected call of Payment.
func (mr *MockStoreMockRecorder) Payment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockStore)(nil).Payment))
}

// Respond mocks base method.
func (m *MockStore) Respond() storage.RespondRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Respond")
	ret0, _ := ret[0].(storage.RespondRepository)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MockStoreMockRecorder) Respond() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockStore)(nil).Respond))
}

// StartSession mocks base method.
func (m *MockStore) StartSession() (mongo.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession")
	ret0, _ := ret[0].(mongo.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockStoreMockRecorder) StartSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockStore)(nil).StartSession))
}

// Task mocks base method.
func (m *MockStore) Task() storage.TaskRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Task")
	ret0, _ := ret[0].(storage.TaskRepository)
	return ret0
}

// Task indicates an expected call of Task.
func (mr *MockStoreMockRecorder) Task() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Task", reflect.TypeOf((*MockStore)(nil).Task))
}

// TgCmd mocks base method.
func (m *MockStore) TgCmd() storage.TgCommandRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TgCmd")
	ret0, _ := ret[0].(storage.TgCommandRepository)
	return ret0
}

// TgCmd indicates an expected call of TgCmd.
func (mr *MockStoreMockRecorder) TgCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TgCmd", reflect.TypeOf((*MockStore)(nil).TgCmd))
}

// User mocks base method.
func (m *MockStore) User() storage.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(storage.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockStoreMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockStore)(nil).User))
}
