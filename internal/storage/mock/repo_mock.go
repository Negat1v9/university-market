// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/repository.go

// Package mongo_mock is a generated GoMock package.
package mongo_mock

import (
	context "context"
	reflect "reflect"

	commentmodel "github.com/Negat1v9/work-marketplace/model/comment"
	paymentmodel "github.com/Negat1v9/work-marketplace/model/payment"
	respondmodel "github.com/Negat1v9/work-marketplace/model/respond"
	taskmodel "github.com/Negat1v9/work-marketplace/model/taskModel"
	tgbotmodel "github.com/Negat1v9/work-marketplace/model/tgBot"
	usermodel "github.com/Negat1v9/work-marketplace/model/userModel"
	gomock "go.uber.org/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(arg0 context.Context, arg1 *usermodel.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), arg0, arg1)
}

// Edit mocks base method.
func (m *MockUserRepository) Edit(ctx context.Context, filter bson.D, upd *usermodel.User) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, filter, upd)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockUserRepositoryMockRecorder) Edit(ctx, filter, upd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserRepository)(nil).Edit), ctx, filter, upd)
}

// Find mocks base method.
func (m *MockUserRepository) Find(arg0 context.Context, arg1 bson.D) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepository)(nil).Find), arg0, arg1)
}

// FindProj mocks base method.
func (m *MockUserRepository) FindProj(ctx context.Context, filter bson.D, proj bson.M) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProj", ctx, filter, proj)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProj indicates an expected call of FindProj.
func (mr *MockUserRepositoryMockRecorder) FindProj(ctx, filter, proj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProj", reflect.TypeOf((*MockUserRepository)(nil).FindProj), ctx, filter, proj)
}

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(arg0 context.Context, arg1 *paymentmodel.Payment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPaymentRepository) Delete(arg0 context.Context, arg1 bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPaymentRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPaymentRepository)(nil).Delete), arg0, arg1)
}

// Edit mocks base method.
func (m *MockPaymentRepository) Edit(arg0 context.Context, arg1 bson.D, arg2 *paymentmodel.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockPaymentRepositoryMockRecorder) Edit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPaymentRepository)(nil).Edit), arg0, arg1, arg2)
}

// Find mocks base method.
func (m *MockPaymentRepository) Find(arg0 context.Context, arg1 bson.D) (*paymentmodel.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*paymentmodel.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPaymentRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPaymentRepository)(nil).Find), arg0, arg1)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(ctx context.Context, task *taskmodel.Task) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), ctx, task)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(ctx context.Context, filter bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), ctx, filter)
}

// Find mocks base method.
func (m *MockTaskRepository) Find(ctx context.Context, filter bson.D) (*taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter)
	ret0, _ := ret[0].(*taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTaskRepositoryMockRecorder) Find(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTaskRepository)(nil).Find), ctx, filter)
}

// FindMany mocks base method.
func (m *MockTaskRepository) FindMany(ctx context.Context, filter bson.D, proj bson.M, limit, skip int64) ([]taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, filter, proj, limit, skip)
	ret0, _ := ret[0].([]taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockTaskRepositoryMockRecorder) FindMany(ctx, filter, proj, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockTaskRepository)(nil).FindMany), ctx, filter, proj, limit, skip)
}

// FindProj mocks base method.
func (m *MockTaskRepository) FindProj(ctx context.Context, filter bson.D, proj bson.M) (*taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProj", ctx, filter, proj)
	ret0, _ := ret[0].(*taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProj indicates an expected call of FindProj.
func (mr *MockTaskRepositoryMockRecorder) FindProj(ctx, filter, proj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProj", reflect.TypeOf((*MockTaskRepository)(nil).FindProj), ctx, filter, proj)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(ctx context.Context, filter bson.D, task *taskmodel.Task) (*taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, filter, task)
	ret0, _ := ret[0].(*taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(ctx, filter, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), ctx, filter, task)
}

// MockTgCommandRepository is a mock of TgCommandRepository interface.
type MockTgCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTgCommandRepositoryMockRecorder
}

// MockTgCommandRepositoryMockRecorder is the mock recorder for MockTgCommandRepository.
type MockTgCommandRepositoryMockRecorder struct {
	mock *MockTgCommandRepository
}

// NewMockTgCommandRepository creates a new mock instance.
func NewMockTgCommandRepository(ctrl *gomock.Controller) *MockTgCommandRepository {
	mock := &MockTgCommandRepository{ctrl: ctrl}
	mock.recorder = &MockTgCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgCommandRepository) EXPECT() *MockTgCommandRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTgCommandRepository) Create(arg0 context.Context, arg1 *tgbotmodel.UserCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTgCommandRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTgCommandRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockTgCommandRepository) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTgCommandRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTgCommandRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockTgCommandRepository) Find(arg0 context.Context, arg1 int64) (*tgbotmodel.UserCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*tgbotmodel.UserCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTgCommandRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTgCommandRepository)(nil).Find), arg0, arg1)
}

// MockRespondRepository is a mock of RespondRepository interface.
type MockRespondRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRespondRepositoryMockRecorder
}

// MockRespondRepositoryMockRecorder is the mock recorder for MockRespondRepository.
type MockRespondRepositoryMockRecorder struct {
	mock *MockRespondRepository
}

// NewMockRespondRepository creates a new mock instance.
func NewMockRespondRepository(ctrl *gomock.Controller) *MockRespondRepository {
	mock := &MockRespondRepository{ctrl: ctrl}
	mock.recorder = &MockRespondRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRespondRepository) EXPECT() *MockRespondRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRespondRepository) Create(arg0 context.Context, arg1 *respondmodel.Respond) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRespondRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRespondRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRespondRepository) Delete(arg0 context.Context, arg1 bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRespondRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRespondRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockRespondRepository) Find(arg0 context.Context, arg1 bson.D) (*respondmodel.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*respondmodel.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRespondRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRespondRepository)(nil).Find), arg0, arg1)
}

// FindMany mocks base method.
func (m *MockRespondRepository) FindMany(ctx context.Context, filter bson.D, limit, skip int64) ([]respondmodel.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, filter, limit, skip)
	ret0, _ := ret[0].([]respondmodel.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockRespondRepositoryMockRecorder) FindMany(ctx, filter, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockRespondRepository)(nil).FindMany), ctx, filter, limit, skip)
}

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// CountWorkerLikesDislikes mocks base method.
func (m *MockCommentRepository) CountWorkerLikesDislikes(ctx context.Context, workerID string) (*commentmodel.CountLikeDislikeWorker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWorkerLikesDislikes", ctx, workerID)
	ret0, _ := ret[0].(*commentmodel.CountLikeDislikeWorker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWorkerLikesDislikes indicates an expected call of CountWorkerLikesDislikes.
func (mr *MockCommentRepositoryMockRecorder) CountWorkerLikesDislikes(ctx, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWorkerLikesDislikes", reflect.TypeOf((*MockCommentRepository)(nil).CountWorkerLikesDislikes), ctx, workerID)
}

// Create mocks base method.
func (m *MockCommentRepository) Create(arg0 context.Context, arg1 *commentmodel.Comment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCommentRepository) Delete(arg0 context.Context, arg1 bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentRepository)(nil).Delete), arg0, arg1)
}

// FindMany mocks base method.
func (m *MockCommentRepository) FindMany(ctx context.Context, filter bson.D, limit, skip int64) ([]commentmodel.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, filter, limit, skip)
	ret0, _ := ret[0].([]commentmodel.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockCommentRepositoryMockRecorder) FindMany(ctx, filter, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockCommentRepository)(nil).FindMany), ctx, filter, limit, skip)
}

// Update mocks base method.
func (m *MockCommentRepository) Update(arg0 context.Context, arg1 bson.D, arg2 *commentmodel.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCommentRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentRepository)(nil).Update), arg0, arg1, arg2)
}
